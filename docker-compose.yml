version: "3.9"

services:
  postgres:
    image: postgres:16-alpine
    container_name: cmpc-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${DB_NAME:-cmpc_libros}
      POSTGRES_USER: ${DB_USER:-cmpc}
      POSTGRES_PASSWORD: ${DB_PASS:-cmpc_password}
    ports:
      - "5432:5432"
    volumes:
      - pgdata:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB"]
      interval: 5s
      timeout: 3s
      retries: 20

  migration:
    build:
      context: ./cmpc-libros-backend
      dockerfile: Dockerfile
      target: builder
    container_name: cmpc-migration
    depends_on:
      postgres:
        condition: service_healthy
    env_file:
      - ./cmpc-libros-backend/.env
    environment:
      DB_HOST: postgres
    command: >
      sh -c "
        npx sequelize-cli db:migrate &&
        npx sequelize-cli db:seed:all
      "
    restart: "no"

  backend:
    build:
      context: ./cmpc-libros-backend
      dockerfile: Dockerfile
      target: runner
    container_name: cmpc-backend
    depends_on:
      migration:
        condition: service_completed_successfully
    env_file:
      - ./cmpc-libros-backend/.env
    environment:
      DB_HOST: postgres
      CORS_ORIGINS: ${CORS_ORIGINS:-http://localhost:8080}
      NODE_ENV: ${NODE_ENV:-development}
    ports:
      - "3000:3000"
    volumes:
      - uploads:/app/uploads
    healthcheck:
      test: ["CMD-SHELL", "wget -qO- http://localhost:3000/api/health || exit 1"]
      interval: 5s
      timeout: 3s
      retries: 20

  frontend:
    build:
      context: ./cmpc-libros-frontend
      dockerfile: Dockerfile
      args:
        VITE_API_BASE_URL: ${VITE_API_BASE_URL:-http://localhost:3000/api}
    container_name: cmpc-frontend
    depends_on:
      backend:
        condition: service_healthy
    ports:
      - "8080:80"

volumes:
  pgdata:
  uploads:
